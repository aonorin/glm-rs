initSidebarItems({"fn":[["abs","Returns `x` if `x ≥ 0`, otherwise it returns `–x`."],["ceil","Returns a value equal to the nearest integer that is greater than or equal to `x`."],["clamp","Returns `min (max (x, min_val), max_val)`."],["clamp_s","A variant of function `clamp` that uses scalar values as thresholds."],["floatBitsToInt","Returns a signed integer value representing the encoding of a floating-point value."],["floatBitsToUint","Returns a unsigned integer value representing the encoding of a floating-point value."],["floor","Returns a value equal to the nearest integer that is less than or equal to `x`."],["fma","Computes and returns `a * b + c`."],["fmod","Modulus. Returns `x – y ∗ floor(x/y)`."],["fract","Returns `x – floor(x)`."],["frexp","Splits `x` into a floating-point significand in the range [0.5, 1.0) and an integral exponent of two, such that: *x = significand⋅2<sup>exponent</sup>*."],["intBitsToFloat","Returns a floating-point value corresponding to a signed integer encoding of a floating-point value."],["isinf","Returns true if x holds a positive infinity or negative infinity. Returns false otherwise."],["isnan","Returns `true` if `x` holds a *NaN*. Returns `false` otherwise."],["ldexp","Builds a floating-point number from `x` and the corresponding integral exponent of two in `exp`, returning: *significand ⋅ 2<sup>exponent</sup>*."],["max","Returns `y` if `x < y`, otherwise it returns `x`."],["max_s","A variant of `max` that always uses a scalar value as the comparator."],["min","Returns `y` if `y < x`, otherwise it returns `x`."],["min_s","A variant of function `min` that uses a scalar value as comparator."],["mix","Returns the linear blend of `x` and `y`, i.e., `x⋅(1−a)+y⋅a`."],["mix_bool","Selects which vector each returned component comes from."],["mix_s","A variant of function `mix` that parameter `a` is a scalar."],["mod_s","Modulus with a scalar number."],["modf","Returns the fractional and integer parts of `x`."],["round","Returns a value equal to the nearest integer to `x`."],["roundEven","Returns a value equal to the nearest integer to `x`."],["sign","Returns `1.0` if `x > 0`, `0.0` if `x = 0`, or `–1.0` if `x < 0`."],["smoothstep","Returns `0.0` if `x ≤ edge0` and `1.0` if `x ≥ edge1` and performs smooth Hermite interpolation between 0 and 1 when `edge0 < x < edge1`."],["smoothstep_s","A variant of `smoothstep` function that use scalar as edges."],["step","Returns `0.0` if `x` < `edge`, otherwise it returns `1.0`."],["step_s","A variant of `step` function that use scalar as the edge."],["trunc","Returns a value equal to the nearest integer to `x` whose absolute value is not larger than the absolute value of `x`."],["uintBitsToFloat","Returns a floating-point value corresponding to a unsigned integer encoding of a floating-point value."]],"trait":[["FloatIntRel",""],["IntFloatRel",""],["NumBoolRel",""]]});